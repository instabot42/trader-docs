define({ "api": [  {    "type": "",    "url": "accDisOrder",    "title": "accDisOrder",    "name": "accDisOrder",    "version": "1.0.0",    "description": "<p>the Accumulate/Distribute Algorithmic order is another name for our Iceberg Order See <a href=\"#api-Command_Reference-icebergOrder\">icebergOrder</a> for details...</p>",    "group": "Command_Reference",    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "balance",    "title": "balance",    "name": "balance",    "version": "1.0.0",    "description": "<p>Send a notification to your default notification channels with a balance report for the exchange and instrument the command is running in.</p>",    "group": "Command_Reference",    "success": {      "examples": [        {          "title": "Example",          "content": "# send me a notification with the balance of the BTCUSD pair on Bitfinex\nbitfinex(BTCUSD) {\n    balance()\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "cancelOrders",    "title": "cancelOrders",    "name": "cancelOrders",    "version": "1.0.0",    "description": "<p>Attempts to cancel open orders</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\"",              "\"all\"",              "\"session\"",              "\"tagged\""            ],            "optional": false,            "field": "which",            "defaultValue": "session",            "description": "<p>Which orders should we cancel.<br> <code>buy</code> will cancel all open buy orders.<br> <code>sell</code> will cancel all open sell orders.<br> <code>all</code> will cancel all open orders.<br> <code>session</code> will cancel all orders opened during the execution of this list of actions.<br> <code>tagged</code> will cancel all orders tagged with the value of <code>tag</code></p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>If <code>which</code> is 'tagged', then this is the tag we will look for.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Example",          "content": "# Place a limit order to go all in, wait 30 minutes for it to fill\n# then cancel the order if it's not fully filled.\nbitfinex(BTCUSD) {\n    limitOrder(side=buy, amount=100%, offset=10, tag=allIn)\n    wait(30m);\n    cancelOrders(tagged, allIn)\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "icebergOrder",    "title": "icebergOrder",    "name": "icebergOrder",    "version": "1.0.0",    "description": "<p>An algorithmic order that breaks up a large order into smaller orders. This is often also called the Accumulate / Distribute order (accDisOrder in Instabot Trader). NOTE: Some exchanges refer to 'Iceberg Order' as an order that is partially hidden, but this is not that kind of order. The small orders are placed relative to the current price, but only if the current price is below/above a set limit price. The system waits for the small order to fill and when it does, places the next order. If the price slips too far, the order is cancelled and re-entered. This implementation attempts to work in the same way as the <a href=\"https://support.okex.com/hc/en-us/articles/115003537571-Strategy-Order-Explanation\">okex iceberg order</a>. <br><br>Note: if you cancel the limit order created by this command on the exchange, then Instabot Trader will take that as a signal to cancel the entire iceberg order. If we did not do this, as soon as you cancelled an order, a new one would take it's place.</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "totalAmount",            "defaultValue": "0",            "description": "<p>The total size of the order</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "averageAmount",            "defaultValue": "0",            "description": "<p>The average size of each of the smaller orders. The size of each order will between 90% and 110% of the averageAmount value.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "variance",            "defaultValue": "0.1%",            "description": "<p>The amount to offset the order from the current price. You may provide a raw value (<code>0.001</code>) or a percentage (<code>0.1%</code>). For example, the buy price would be calculated as <code>current bid * (1 - variance)</code>. With a bid at 6000 and a variance of 0.1%, the order would be placed at <code>6000 * (1 - 0.001) = 5994</code>.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "limitPrice",            "description": "<p>When buying, the bid price must be below the limit price. When selling, the ask price must be above the limit price. While the price is the wrong side of the limit price, the iceberg order will be suspended - no new orders will be placed. When the price crosses back, then ordering will continue until totalAmount has been filled.</p>"          },          {            "group": "Parameter",            "type": "TimeString",            "optional": false,            "field": "timeLimit",            "defaultValue": "1d",            "description": "<p>The amount of time to leave the iceberg order running before giving up. Numbers are treated as seconds. Add the postfix s, m, h or d to indicate seconds, minutes or hours or days. eg 12h = 12 hours.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy order or a sell order.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, place an order to buy 1000 contracts, 50 contracts at a time,\n# while the price is below 6400. Orders are place 0.02% away from the top of the order book\n# If it's not fully filled after 12 hours, it will be cancelled.\n# When done, send a balance and PnL report to your phone / telegram chat.\nderibit(BTC-PERPETUAL) {\n    icebergOrder(side=buy, totalAmount=1000, averageAmount=50, variance=0.02%, limitPrice=6400, timeLimit=12h);\n    balance();\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "limitOrder",    "title": "limitOrder",    "name": "limitOrder",    "version": "1.0.0",    "description": "<p>Place a limit order.</p>",    "group": "Command_Reference",    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Does not support <code>%</code> or <code>%%</code> units in <code>amount</code></p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Bitfinex Example",          "content": "# On Bitfinex BTCUSD pair, place a limit order to buy 1btc at a price $10 below the current price\nbitfinex(BTCUSD) {\n    limitOrder(side=buy, amount=1, offset=10);\n}",          "type": "json"        },        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, update our open position to +1000 contracts\n# if the price drops $50\nderibit(BTC-PERPETUAL) {\n    limitOrder(position=1000, offset=50);\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "offset",            "defaultValue": "0",            "description": "<p>The offset from the current price or absolute price. Examples...<br><br> <code>50</code> - offset $50 from the current price (below for buys, above for sells)<br> <code>5%</code> - offset 5% of the current price (eg price is $1000, offset $50 from it)<br> <code>@950</code> - absolute price of 950, regardless of what the current price is (so not an offset at all really, but still useful).</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "position",            "description": "<p>Sets the target position size, which is the size of your open position after the trade completes. If you use <code>position</code>, then you do not need to use <code>side</code> or <code>amount</code> as these are calculated for you.<br><br> The amount traded will be the difference between your current open position and the target position size. For example, if your current position is -100 contracts (you're short 100 contracts), and you pass in a position of 300, then an order will be placed to buy 400 contracts. This ensures we get from the current -100 to our desired target of +300.<br><br> On spot exchanges, like Bitfinex, the target amount represents the amount of the asset you'd like to end up with. For example, on the BTCUSD pair, position would represent the amount of BTC you'd like to own after the order completes. If your balance is current 4 btc and you set <code>position</code> to 3, it will result in a sell of 1btc (to take you from the current 4 btc balance to teh desired 3 btc balance). However, if your balance was 0 btc, then it would result in a buy of 3 btc.&lt;br<br> Note that the amount to actually trade is calculated from your current open position at the moment the action is executed and does not take into account other open orders.<br><br> If you do not have enough funds to complete the order, all available funds will be used to get as close as possible to the target position.<br><br> Required if <code>side</code> and <code>amount</code> are not used. <code>side</code> and <code>amount</code> are ignored if <code>position</code> is used.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    }  },  {    "type": "",    "url": "marketOrder",    "title": "marketOrder",    "name": "marketOrder",    "version": "1.0.0",    "description": "<p>Place a market order.</p>",    "group": "Command_Reference",    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Does not support <code>%</code> or <code>%%</code> units in <code>amount</code></p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Bitfinex Example",          "content": "# On Bitfinex BTCUSD pair, place a market order for 1btc\nbitfinex(BTCUSD) {\n    marketOrder(side=buy, amount=1);\n}",          "type": "json"        },        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, update our open position to +1000 contracts\nderibit(BTC-PERPETUAL) {\n    marketOrder(position=1000);\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "position",            "description": "<p>Sets the target position size, which is the size of your open position after the trade completes. If you use <code>position</code>, then you do not need to use <code>side</code> or <code>amount</code> as these are calculated for you.<br><br> The amount traded will be the difference between your current open position and the target position size. For example, if your current position is -100 contracts (you're short 100 contracts), and you pass in a position of 300, then an order will be placed to buy 400 contracts. This ensures we get from the current -100 to our desired target of +300.<br><br> On spot exchanges, like Bitfinex, the target amount represents the amount of the asset you'd like to end up with. For example, on the BTCUSD pair, position would represent the amount of BTC you'd like to own after the order completes. If your balance is current 4 btc and you set <code>position</code> to 3, it will result in a sell of 1btc (to take you from the current 4 btc balance to teh desired 3 btc balance). However, if your balance was 0 btc, then it would result in a buy of 3 btc.&lt;br<br> Note that the amount to actually trade is calculated from your current open position at the moment the action is executed and does not take into account other open orders.<br><br> If you do not have enough funds to complete the order, all available funds will be used to get as close as possible to the target position.<br><br> Required if <code>side</code> and <code>amount</code> are not used. <code>side</code> and <code>amount</code> are ignored if <code>position</code> is used.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          }        ]      }    }  },  {    "type": "",    "url": "notify",    "title": "notify",    "name": "notify",    "version": "1.0.0",    "description": "<p>Send a notification to one of the supported notification channels</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "msg",            "description": "<p>The message to send. Use slack shortcodes for emoji when sending to Slack.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "title",            "description": "<p>The title of an attachment to include with the message.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "color",            "description": "<p>The hex color to use for the attachment side bar (css style like #ff0000), or one of <code>good</code> (green), <code>warning</code> (yellow) or <code>danger</code> (red).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "text",            "description": "<p>The text to use in the attachment area.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"sms\"",              "\"slack\"",              "\"telegram\""            ],            "optional": true,            "field": "who",            "defaultValue": "default",            "description": "<p>Which channel to send the message to. By default it sends to the channel configured in your <code>config/local.json</code> file, but you can specify the channel here. SMS, Slack and Telegram are supported channels.</p>"          }        ]      }    },    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "Telegram",            "description": "<p>Instabot Trader can only send messages to telegram after you've started a chat.</p>"          },          {            "group": "Compatibility",            "optional": false,            "field": "Slack",            "description": "<p><code>title</code>, <code>color</code> and <code>text</code> are really for sending '<a href=\"https://api.slack.com/docs/message-attachments\">attachments</a>' to Slack - other services are ignoring these for now.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Example",          "content": "bitfinex(BTCUSD) {\n    notify(msg=\"BUY BUY BUY, MOON, LAMBO, ETC\");\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "pingPongOrder",    "title": "pingPongOrder",    "name": "pingPongOrder",    "version": "1.0.0",    "description": "<p>This algorithmic order starts off identical to a <code>scaledOrder</code>. It places a series of limit orders. However, once the orders are placed, Instabot Trader waits for them to be filled. As soon as one of the limit orders is filled, a new limit order is placed, <code>pongDistance</code> away from the original on the other side of the book. The order completes when all the original ping orders have been filled and all the resulting pong orders have also been filled. However, if <code>endless</code> is 'true', then the pong orders will create new ping orders as they are filled and the whole process starts again. When in <code>endless</code> mode the order will never complete. If you want to cancel it, you can either manually cancel all the open orders on the exchange, or call <code>cancelOrders(tagged, tagname)</code>. The tag defaults of 'pingpong' for this order, but can be anything you like.</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "from",            "defaultValue": "0",            "description": "<p>The offset from the current price to start placing orders. See <code>offset</code> in limitOrder.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "to",            "defaultValue": "50",            "description": "<p>The offset from the current price to finish placing orders. See <code>offset</code> in limitOrder.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "2-100",            "optional": true,            "field": "orderCount",            "defaultValue": "10",            "description": "<p>The number of orders to place between <code>from</code> and <code>to</code>.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"linear\"",              "\"ease-in\"",              "\"ease-out\"",              "\"ease-in-out\""            ],            "optional": true,            "field": "easing",            "defaultValue": "linear",            "description": "<p>The easing method to use when spacing the orders out in the range between <code>from</code> and <code>to</code>.<br> <code>linear</code> will place all the orders evenly spaced out between <code>from</code> and <code>to</code>.<br> <code>ease-in</code> will bunch the orders up closer to <code>from</code>.<br> <code>ease-out</code> will bunch up the orders closer to <code>to</code>.<br> <code>ease-in-out</code> will bunch the orders up closer to <code>from</code> and <code>to</code> away from the middle of the range.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "0-1",            "optional": true,            "field": "varyAmount",            "defaultValue": "0",            "description": "<p>How much, as a percentage, should the amount of individual orders be randomised by. Can accept numbers, like <code>0.1</code>, or percentages like <code>10%</code>. For example, with a total amount of 1000, and an orderCount of 10, each order will be for 100 units. With a 10% varyAmount, each order will be between 90 and 110 units.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "0-1",            "optional": true,            "field": "varyPrice",            "defaultValue": "0",            "description": "<p>How much, as a percentage, should the price of individual orders be randomised by.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "pongDistance",            "defaultValue": "20",            "description": "<p>Once a ping order has been filled, a new order is placed <code>pongDistance</code> away on the other side of the book.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "pingAmount",            "defaultValue": "0",            "description": "<p>The size of each of the individual ping orders. This will be used in preference to <code>amount</code>. The total amount needed is pingAmount * orderCount.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "pongAmount",            "defaultValue": "0",            "description": "<p>The size of each of the individual pong orders. This will be used in preference to <code>amount</code>.</p>"          },          {            "group": "Parameter",            "type": "Number",            "allowedValues": [              "\"true\"",              "\"false\""            ],            "optional": true,            "field": "endless",            "defaultValue": "false",            "description": "<p>The Ping Pong order normally completes after the original ping order is filled and the following pong order is also filled. If <code>endless</code> is true, then the pong order will generate a new ping order and the process will continue forever.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    },    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Does not support <code>%</code> or <code>%%</code> units in <code>amount</code></p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Deribit Example",          "content": "# On Deribit BTC-28DEC18 contact, place 40 buy orders between $0 and $20 orders below\n# the current price. As each order is filled, a new sell order is place $10 away.\n# Once all the sells fill, the order will complete.\nderibit(BTC-28DEC18) {\n  pingPongOrder(from=0, to=20, orderCount=40, amount=200, side=buy, pongDistance=10, endless=false)\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "scaledOrder",    "title": "scaledOrder",    "name": "scaledOrder",    "version": "1.0.0",    "description": "<p>Place a series of limit orders over a range of prices. Note that due to order size rounding implemented by each of the exchanges, it is possible that the final total of orders is slightly different from the amount requested.</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "from",            "defaultValue": "0",            "description": "<p>The offset from the current price to start placing orders. See <code>offset</code> in limitOrder.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "to",            "defaultValue": "100",            "description": "<p>The offset from the current price to finish placing orders. See <code>offset</code> in limitOrder.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "2-100",            "optional": true,            "field": "orderCount",            "defaultValue": "10",            "description": "<p>The number of orders to place between <code>from</code> and <code>to</code>.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"linear\"",              "\"ease-in\"",              "\"ease-out\"",              "\"ease-in-out\""            ],            "optional": true,            "field": "easing",            "defaultValue": "linear",            "description": "<p>The easing method to use when spacing the orders out in the range between <code>from</code> and <code>to</code>.<br> <code>linear</code> will place all the orders evenly spaced out between <code>from</code> and <code>to</code>.<br> <code>ease-in</code> will bunch the orders up closer to <code>from</code>.<br> <code>ease-out</code> will bunch up the orders closer to <code>to</code>.<br> <code>ease-in-out</code> will bunch the orders up closer to <code>from</code> and <code>to</code> away from the middle of the range.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "0-1",            "optional": true,            "field": "varyAmount",            "defaultValue": "0",            "description": "<p>How much, as a percentage, should the amount of individual orders be randomised by. Can accept numbers, like <code>0.1</code>, or percentages like <code>10%</code>. For example, with a total amount of 1000, and an orderCount of 10, each order will be for 100 units. With a 10% varyAmount, each order will be between 90 and 110 units.</p>"          },          {            "group": "Parameter",            "type": "Number",            "size": "0-1",            "optional": true,            "field": "varyPrice",            "defaultValue": "0",            "description": "<p>How much, as a percentage, should the price of individual orders be randomised by.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "position",            "description": "<p>Sets the target position size, which is the size of your open position after the trade completes. If you use <code>position</code>, then you do not need to use <code>side</code> or <code>amount</code> as these are calculated for you.<br><br> The amount traded will be the difference between your current open position and the target position size. For example, if your current position is -100 contracts (you're short 100 contracts), and you pass in a position of 300, then an order will be placed to buy 400 contracts. This ensures we get from the current -100 to our desired target of +300.<br><br> On spot exchanges, like Bitfinex, the target amount represents the amount of the asset you'd like to end up with. For example, on the BTCUSD pair, position would represent the amount of BTC you'd like to own after the order completes. If your balance is current 4 btc and you set <code>position</code> to 3, it will result in a sell of 1btc (to take you from the current 4 btc balance to teh desired 3 btc balance). However, if your balance was 0 btc, then it would result in a buy of 3 btc.&lt;br<br> Note that the amount to actually trade is calculated from your current open position at the moment the action is executed and does not take into account other open orders.<br><br> If you do not have enough funds to complete the order, all available funds will be used to get as close as possible to the target position.<br><br> Required if <code>side</code> and <code>amount</code> are not used. <code>side</code> and <code>amount</code> are ignored if <code>position</code> is used.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    },    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Does not support <code>%</code> or <code>%%</code> units in <code>amount</code></p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, place 20 buy orders between $5 and $100 orders below\n# the current price. Each order will be for 0.05btc.\nderibit(BTC-PERPETUAL) {\n    scaledOrder(from=5, to=100, orderCount=20, amount=1, side=buy, tag=scaleMeIn);\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "steppedMarketOrder",    "title": "steppedMarketOrder",    "name": "steppedMarketOrder",    "version": "1.0.0",    "description": "<p>This has been deprecated and is now called twapOrder. Still works the same for now though. See <a href=\"#api-Command_Reference-twapOrder\">twapOrder</a> for details...</p>",    "group": "Command_Reference",    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "stopMarketOrder",    "title": "stopMarketOrder",    "name": "stopMarketOrder",    "version": "1.0.0",    "description": "<p>Place a stop market order. Where supported, the order will be placed with 'reduce only' enabled to ensure it can only reduce your position size (not increase it).<br><br>Take care using <code>position</code> for stop orders, as the size of the order is calculated at the time the order is placed, not when it is executed. For example, if you have no open positions and trigger a limit order, then immediately a stop order, the limit order will not have been filled yet when the stop order is placed, so your position is likely to still be zero. Instead, use a market order to get into position, or wait after placing the limit order (though there is still a risk it won't have been fully filled), or don't use <code>position</code> to set the size of your stop orders.</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "offset",            "defaultValue": "0",            "description": "<p>The offset from the current price. This is similar to <code>offset</code> in other order types. However, buy order will be offset to a price higher than the current price, and sells will be offset to a price lower.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"index\"",              "\"mark\"",              "\"last\""            ],            "optional": true,            "field": "trigger",            "defaultValue": "mark",            "description": "<p>Determine which price to trigger the stop order on, if supported. <code>index</code> represents the underlying index price, <code>mark</code> is the mark price and <code>last</code> is the last traded price.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "position",            "description": "<p>Sets the target position size, which is the size of your open position after the trade completes. If you use <code>position</code>, then you do not need to use <code>side</code> or <code>amount</code> as these are calculated for you.<br><br> The amount traded will be the difference between your current open position and the target position size. For example, if your current position is -100 contracts (you're short 100 contracts), and you pass in a position of 300, then an order will be placed to buy 400 contracts. This ensures we get from the current -100 to our desired target of +300.<br><br> On spot exchanges, like Bitfinex, the target amount represents the amount of the asset you'd like to end up with. For example, on the BTCUSD pair, position would represent the amount of BTC you'd like to own after the order completes. If your balance is current 4 btc and you set <code>position</code> to 3, it will result in a sell of 1btc (to take you from the current 4 btc balance to teh desired 3 btc balance). However, if your balance was 0 btc, then it would result in a buy of 3 btc.&lt;br<br> Note that the amount to actually trade is calculated from your current open position at the moment the action is executed and does not take into account other open orders.<br><br> If you do not have enough funds to complete the order, all available funds will be used to get as close as possible to the target position.<br><br> Required if <code>side</code> and <code>amount</code> are not used. <code>side</code> and <code>amount</code> are ignored if <code>position</code> is used.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    },    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Only supports <code>mark</code> and <code>index</code> triggers</p>"          },          {            "group": "Compatibility",            "optional": false,            "field": "bitfinex",            "description": "<p>trigger is ignored.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Bitfinex Example",          "content": "# On Bitfinex BTCUSD pair, place a market order for 1btc and a stop loss 1% below entry\nbitfinex(BTCUSD) {\n    marketOrder(side=buy, amount=1);\n    stopMarketOrder(side=sell, amount=1, offset=1%)\n}",          "type": "json"        },        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, update our open position to +1000 contracts\n# and set it up a stop loss market order if the price drops 1% from here.\nderibit(BTC-PERPETUAL) {\n    marketOrder(position=1000);\n    stopMarketOrder(side=sell, amount=1000, offset=1%)\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "twapOrder",    "title": "twapOrder",    "name": "twapOrder",    "version": "1.0.0",    "description": "<p>Also known as Time-Weighted Average Price (TWAP). Place a series of market orders over an extended period of time. The amount will be split between all the orders. After each market order is executed there will be a delay for <code>(duration / orderCount)</code> seconds. For example, if duration is 60 seconds, and the orderCount is 10, then there will be a (60 / 10) = 6 second delay between each order.</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "size": "1-100",            "optional": true,            "field": "orderCount",            "defaultValue": "10",            "description": "<p>The number of orders to place.</p>"          },          {            "group": "Parameter",            "type": "TimeString",            "optional": true,            "field": "duration",            "defaultValue": "60s",            "description": "<p>The amount of time to spread the orders over. Supports a number in seconds, or s, m, or h suffix for seconds, minutes and hours (eg 5m = 5 minutes, 2h = 2 hours)</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "position",            "description": "<p>Sets the target position size, which is the size of your open position after the trade completes. If you use <code>position</code>, then you do not need to use <code>side</code> or <code>amount</code> as these are calculated for you.<br><br> The amount traded will be the difference between your current open position and the target position size. For example, if your current position is -100 contracts (you're short 100 contracts), and you pass in a position of 300, then an order will be placed to buy 400 contracts. This ensures we get from the current -100 to our desired target of +300.<br><br> On spot exchanges, like Bitfinex, the target amount represents the amount of the asset you'd like to end up with. For example, on the BTCUSD pair, position would represent the amount of BTC you'd like to own after the order completes. If your balance is current 4 btc and you set <code>position</code> to 3, it will result in a sell of 1btc (to take you from the current 4 btc balance to teh desired 3 btc balance). However, if your balance was 0 btc, then it would result in a buy of 3 btc.&lt;br<br> Note that the amount to actually trade is calculated from your current open position at the moment the action is executed and does not take into account other open orders.<br><br> If you do not have enough funds to complete the order, all available funds will be used to get as close as possible to the target position.<br><br> Required if <code>side</code> and <code>amount</code> are not used. <code>side</code> and <code>amount</code> are ignored if <code>position</code> is used.</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"buy\"",              "\"sell\""            ],            "optional": true,            "field": "side",            "defaultValue": "buy",            "description": "<p>Is this a buy or sell order. Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": true,            "field": "amount",            "defaultValue": "0",            "description": "<p>The size of the order.<br><br> How the amount if interpreted depends on the exchange. Spot exchanges like Bitfinex will treat the amount as the quantity of the asset to buy or sell. For example, on the BTCUSD pair the amount would be measured in BTC. These exchanges also allow you to express the amount as a percentage of either your total account value (eg, 50%), or as a percentage of your available funds (eg, 50%%).<br><br> On Futures exchanges like Bitmex and Deribit, all trades are expressed in <code>contracts</code>, so the amount would be the number of contracts to buy or sell. Normally you can only trade a whole number of contracts, and the percentage values are not supported.<br><br> Required if <code>position</code> is not used.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "tag",            "description": "<p>Tag this order with the value given, so it can be canceled later in the action list with <code>cancelOrders()</code>.</p>"          }        ]      }    },    "error": {      "fields": {        "Compatibility": [          {            "group": "Compatibility",            "optional": false,            "field": "deribit",            "description": "<p>Does not support <code>%</code> or <code>%%</code> units in <code>amount</code></p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Deribit Example",          "content": "# On Deribit BTC-PERPETUAL contact, place 20 buy orders spread over a 10 minute period\n# in order to buy 1 btc.\nderibit(BTC-PERPETUAL) {\n    twapOrder(orderCount=20, amount=1, side=buy, duration=10m);\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  },  {    "type": "",    "url": "wait",    "title": "wait",    "name": "wait",    "version": "1.0.0",    "description": "<p>Waits for a given amount of time before proceeding to the next command...</p>",    "group": "Command_Reference",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "TimeString",            "optional": false,            "field": "duration",            "defaultValue": "60s",            "description": "<p>The number of seconds to wait. Can also include units, so <code>10</code> is 10 seconds, <code>10s</code> is also 10 seconds, <code>10m</code> is 10 minutes and <code>10h</code> is 10 hours.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Example",          "content": "# Place a limit order to go all in, wait 30 minutes for it to fill\n# then replace it with a market order if it wasn't filled\nbitfinex(BTCUSD) {\n    limitOrder(side=buy, amount=100%, offset=10, tag=allIn)\n    wait(30m);\n    cancelOrders(tagged, allIn)\n    marketOrder(side=buy, amount=100%);\n}",          "type": "json"        }      ]    },    "filename": "src/commands.js",    "groupTitle": "Command_Reference"  }] });
